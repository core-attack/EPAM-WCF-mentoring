//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Host.OrderServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://epam.com/Mentoring/WCF/OrderService", ConfigurationName="OrderServiceReference.IOrderService")]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/OrdersWithStatuses", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/OrdersWithStatusesRespon" +
            "se")]
        NorthwindModel.OrderDto[] OrdersWithStatuses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/OrdersWithStatuses", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/OrdersWithStatusesRespon" +
            "se")]
        System.Threading.Tasks.Task<NorthwindModel.OrderDto[]> OrdersWithStatusesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Orders", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/OrdersResponse")]
        NorthwindModel.Order[] Orders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Orders", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/OrdersResponse")]
        System.Threading.Tasks.Task<NorthwindModel.Order[]> OrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/LastNewOrder", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/LastNewOrderResponse")]
        NorthwindModel.Order LastNewOrder();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/LastNewOrder", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/LastNewOrderResponse")]
        System.Threading.Tasks.Task<NorthwindModel.Order> LastNewOrderAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Details", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/DetailsResponse")]
        NorthwindModel.Order Details(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Details", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/DetailsResponse")]
        System.Threading.Tasks.Task<NorthwindModel.Order> DetailsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Create", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/CreateResponse")]
        void Create(NorthwindModel.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Create", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(NorthwindModel.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Update", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/UpdateResponse")]
        void Update(NorthwindModel.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Update", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(NorthwindModel.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Delete", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/Delete", ReplyAction="http://epam.com/Mentoring/WCF/OrderService/IOrderService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/SetStatus")]
        void SetStatus(NorthwindModel.OrderWithStatus ows, System.Nullable<System.DateTime> dateTime);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/SetStatus")]
        System.Threading.Tasks.Task SetStatusAsync(NorthwindModel.OrderWithStatus ows, System.Nullable<System.DateTime> dateTime);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/IsInProgress")]
        void IsInProgress(int orderId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/IsInProgress")]
        System.Threading.Tasks.Task IsInProgressAsync(int orderId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/IsDone")]
        void IsDone(int orderId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/OrderService/IOrderService/IsDone")]
        System.Threading.Tasks.Task IsDoneAsync(int orderId, System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : Host.OrderServiceReference.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<Host.OrderServiceReference.IOrderService>, Host.OrderServiceReference.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NorthwindModel.OrderDto[] OrdersWithStatuses() {
            return base.Channel.OrdersWithStatuses();
        }
        
        public System.Threading.Tasks.Task<NorthwindModel.OrderDto[]> OrdersWithStatusesAsync() {
            return base.Channel.OrdersWithStatusesAsync();
        }
        
        public NorthwindModel.Order[] Orders() {
            return base.Channel.Orders();
        }
        
        public System.Threading.Tasks.Task<NorthwindModel.Order[]> OrdersAsync() {
            return base.Channel.OrdersAsync();
        }
        
        public NorthwindModel.Order LastNewOrder() {
            return base.Channel.LastNewOrder();
        }
        
        public System.Threading.Tasks.Task<NorthwindModel.Order> LastNewOrderAsync() {
            return base.Channel.LastNewOrderAsync();
        }
        
        public NorthwindModel.Order Details(int id) {
            return base.Channel.Details(id);
        }
        
        public System.Threading.Tasks.Task<NorthwindModel.Order> DetailsAsync(int id) {
            return base.Channel.DetailsAsync(id);
        }
        
        public void Create(NorthwindModel.Order order) {
            base.Channel.Create(order);
        }
        
        public System.Threading.Tasks.Task CreateAsync(NorthwindModel.Order order) {
            return base.Channel.CreateAsync(order);
        }
        
        public void Update(NorthwindModel.Order order) {
            base.Channel.Update(order);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(NorthwindModel.Order order) {
            return base.Channel.UpdateAsync(order);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public void SetStatus(NorthwindModel.OrderWithStatus ows, System.Nullable<System.DateTime> dateTime) {
            base.Channel.SetStatus(ows, dateTime);
        }
        
        public System.Threading.Tasks.Task SetStatusAsync(NorthwindModel.OrderWithStatus ows, System.Nullable<System.DateTime> dateTime) {
            return base.Channel.SetStatusAsync(ows, dateTime);
        }
        
        public void IsInProgress(int orderId, System.DateTime date) {
            base.Channel.IsInProgress(orderId, date);
        }
        
        public System.Threading.Tasks.Task IsInProgressAsync(int orderId, System.DateTime date) {
            return base.Channel.IsInProgressAsync(orderId, date);
        }
        
        public void IsDone(int orderId, System.DateTime date) {
            base.Channel.IsDone(orderId, date);
        }
        
        public System.Threading.Tasks.Task IsDoneAsync(int orderId, System.DateTime date) {
            return base.Channel.IsDoneAsync(orderId, date);
        }
    }
}
