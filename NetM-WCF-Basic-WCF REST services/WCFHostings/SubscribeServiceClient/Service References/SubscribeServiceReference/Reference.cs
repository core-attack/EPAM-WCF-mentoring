//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SubscribeServiceClient.SubscribeServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://epam.com/Mentoring/WCF/SubscribeService", ConfigurationName="SubscribeServiceReference.ISubscribeService", CallbackContract=typeof(ISubscribeServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISubscribeService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/SubscribeService/ISubscribeService/Subscribe")]
        void Subscribe(NorthwindModel.OrderWithStatus ows);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/SubscribeService/ISubscribeService/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync(NorthwindModel.OrderWithStatus ows);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/SubscribeService/ISubscribeService/NotifyEveryone")]
        void NotifyEveryone(NorthwindModel.OrderWithStatus ows);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/SubscribeService/ISubscribeService/NotifyEveryone")]
        System.Threading.Tasks.Task NotifyEveryoneAsync(NorthwindModel.OrderWithStatus ows);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/SubscribeService/ISubscribeService/Unsubscribe")]
        void Unsubscribe(NorthwindModel.OrderWithStatus ows);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/SubscribeService/ISubscribeService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync(NorthwindModel.OrderWithStatus ows);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscribeServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://epam.com/Mentoring/WCF/SubscribeService/ISubscribeService/StatusWasChanged" +
            "")]
        void StatusWasChanged(NorthwindModel.OrderWithStatus order);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscribeServiceChannel : ISubscribeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscribeServiceClient : System.ServiceModel.DuplexClientBase<ISubscribeService>, ISubscribeService {
        
        public SubscribeServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SubscribeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SubscribeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscribeServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SubscribeServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe(NorthwindModel.OrderWithStatus ows) {
            base.Channel.Subscribe(ows);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(NorthwindModel.OrderWithStatus ows) {
            return base.Channel.SubscribeAsync(ows);
        }
        
        public void NotifyEveryone(NorthwindModel.OrderWithStatus ows) {
            base.Channel.NotifyEveryone(ows);
        }
        
        public System.Threading.Tasks.Task NotifyEveryoneAsync(NorthwindModel.OrderWithStatus ows) {
            return base.Channel.NotifyEveryoneAsync(ows);
        }
        
        public void Unsubscribe(NorthwindModel.OrderWithStatus ows) {
            base.Channel.Unsubscribe(ows);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(NorthwindModel.OrderWithStatus ows) {
            return base.Channel.UnsubscribeAsync(ows);
        }
    }
}
